import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.74.0';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { messages, files, mode, extractedText } = await req.json();
    const DIREITO_PREMIUM_API_KEY = Deno.env.get('DIREITO_PREMIUM_API_KEY');
    const SUPABASE_URL = Deno.env.get('SUPABASE_URL');
    const SUPABASE_SERVICE_ROLE_KEY = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY');

    if (!DIREITO_PREMIUM_API_KEY) {
      throw new Error('DIREITO_PREMIUM_API_KEY n√£o configurada');
    }

    // Criar cliente Supabase para buscar dados da CF
    const supabase = createClient(SUPABASE_URL!, SUPABASE_SERVICE_ROLE_KEY!);

    // Detectar men√ß√µes a artigos da CF
    const lastUserMessage = messages[messages.length - 1];
    let cfContext = '';
    const hasFiles = files && files.length > 0;
    
    // Se h√° arquivos anexados, adicionar instru√ß√£o especial de an√°lise
    let fileAnalysisPrefix = '';
    if (hasFiles) {
      fileAnalysisPrefix = `\n\n**IMPORTANTE - ARQUIVO ANEXADO:**
Voc√™ recebeu um arquivo real (imagem ou PDF). Voc√™ DEVE analisar o CONTE√öDO REAL do arquivo.

${extractedText ? `**TEXTO EXTRA√çDO DO PDF:**\n${extractedText}\n\n` : ''}

Sua resposta DEVE:
1. Descrever EXATAMENTE o que voc√™ v√™/l√™ no arquivo (n√£o invente nada)
2. Extrair textos vis√≠veis se for imagem
3. Resumir os pontos principais encontrados NO ARQUIVO
4. Perguntar √† pessoa o que ela gostaria de fazer com esse conte√∫do
5. Nas sugest√µes [SUGEST√ïES], oferecer perguntas espec√≠ficas baseadas no CONTE√öDO REAL analisado

**NUNCA invente conte√∫do que n√£o est√° no arquivo!**\n`;
    }
    
    // Regex para detectar artigos (art. 5¬∫, artigo 5, art 5, etc)
    const articleRegex = /art(?:igo)?\.?\s*(\d+)/gi;
    const articleMatches = lastUserMessage?.content?.match(articleRegex);
    
    if (articleMatches) {
      console.log('Artigos detectados:', articleMatches);
      
      // Buscar cada artigo mencionado
      for (const match of articleMatches) {
        const articleNum = match.replace(/art(?:igo)?\.?\s*/gi, '').trim();
        
        const { data: articles } = await supabase
          .from('CF - Constitui√ß√£o Federal')
          .select('*')
          .ilike('N√∫mero do Artigo', `%${articleNum}%`)
          .limit(1);
        
        if (articles && articles.length > 0) {
          const article = articles[0];
          cfContext += `\n\n[ARTIGO ${article['N√∫mero do Artigo']} DA CF]\n`;
          cfContext += `${article.Artigo}\n`;
          if (article.Narra√ß√£o) cfContext += `Narra√ß√£o: ${article.Narra√ß√£o}\n`;
          if (article.Comentario) cfContext += `Coment√°rio: ${article.Comentario}\n`;
        }
      }
    }

    // Preparar o prompt do sistema baseado no modo
    let systemPrompt = '';
    
    if (mode === 'lesson') {
      systemPrompt = `Voc√™ √© uma professora de direito altamente experiente criando aulas completas e estruturadas.

MISS√ÉO: Criar uma aula COMPLETA, DETALHADA e DID√ÅTICA sobre o tema solicitado.

ESTRUTURA OBRIGAT√ìRIA DA AULA:

# üéØ Objetivos de Aprendizagem
Liste 3-5 objetivos claros do que o aluno aprender√°

# üìñ Introdu√ß√£o
‚Ä¢ Contextualize o tema (2-3 par√°grafos)
‚Ä¢ Explique a import√¢ncia pr√°tica e jur√≠dica
‚Ä¢ Apresente a relev√¢ncia atual

# üìö Conte√∫do Principal

## Conceitos Fundamentais
‚Ä¢ Defina todos os termos t√©cnicos
‚Ä¢ Explique de forma clara e did√°tica
‚Ä¢ Use analogias quando necess√°rio

## Base Legal
‚Ä¢ SEMPRE cite artigos espec√≠ficos das leis aplic√°veis
‚Ä¢ Explique cada artigo citado em linguagem simples
‚Ä¢ Mostre a aplica√ß√£o pr√°tica de cada artigo

## Aprofundamento Jur√≠dico
‚Ä¢ An√°lise doutrin√°ria
‚Ä¢ Jurisprud√™ncia relevante (cite decis√µes importantes)
‚Ä¢ Debates atuais sobre o tema

# üí° Exemplos Pr√°ticos
Apresente PELO MENOS 3 situa√ß√µes reais detalhadas onde o tema se aplica

# ‚öñÔ∏è Casos Concretos
Descreva 2-3 casos pr√°ticos com:
‚Ä¢ Situa√ß√£o f√°tica
‚Ä¢ Quest√£o jur√≠dica
‚Ä¢ An√°lise passo a passo
‚Ä¢ Resolu√ß√£o fundamentada

# ‚úÖ Resumo e Pontos-Chave
Liste 8-10 pontos essenciais que o aluno DEVE memorizar

# üéì Exerc√≠cios de Fixa√ß√£o
Crie 5 quest√µes:
‚Ä¢ 3 quest√µes de m√∫ltipla escolha
‚Ä¢ 2 quest√µes dissertativas
‚Ä¢ Todas com gabaritos comentados

# üìé Para Ir Al√©m
‚Ä¢ Sugira 3-4 temas relacionados para aprofundamento
‚Ä¢ Indique artigos e livros de refer√™ncia
‚Ä¢ Pr√≥ximos passos no aprendizado

IMPORTANTE:
- Use uma linguagem clara mas t√©cnica quando necess√°rio
- Seja extremamente detalhado e completo
- Cite SEMPRE as bases legais (artigos, leis, c√≥digos)
- Use exemplos pr√°ticos e casos reais
- Formate bem o texto com markdown
- Seja did√°tico e organizado

${cfContext ? `\n\nCONTEXTO DA CONSTITUI√á√ÉO FEDERAL:${cfContext}` : ''}`;
    } else {
      systemPrompt = `Voc√™ √© uma assistente jur√≠dica especializada em orientar pessoas em situa√ß√µes do dia a dia envolvendo direito brasileiro.

SEU OBJETIVO:
Ajudar pessoas comuns a entenderem seus direitos e saberem como proceder em situa√ß√µes reais da vida cotidiana.

COMO RESPONDER:
1. **Entenda a Situa√ß√£o**: Ou√ßa atentamente o problema relatado
2. **Explique os Direitos**: Diga claramente quais s√£o os direitos da pessoa, SEMPRE citando os artigos espec√≠ficos das leis brasileiras
3. **D√™ o Passo a Passo**: Instrua sobre o que fazer, em ordem de a√ß√µes
4. **Sugira Documentos**: Liste documentos que podem ser necess√°rios
5. **Mencione Prazos**: Alerte sobre prazos importantes, se houver
6. **Cite a Lei**: SEMPRE mencione a base legal completa:
   - C√≥digo Civil (CC): cite artigos quando aplic√°vel
   - C√≥digo de Defesa do Consumidor (CDC): cite artigos quando aplic√°vel
   - Consolida√ß√£o das Leis do Trabalho (CLT): cite artigos quando aplic√°vel
   - C√≥digo de Tr√¢nsito Brasileiro (CTB): cite artigos quando aplic√°vel
   - C√≥digo Penal (CP): cite artigos quando aplic√°vel
   - Constitui√ß√£o Federal: cite artigos quando aplic√°vel
7. **Seja Pr√°tico**: Foque em a√ß√µes concretas que a pessoa pode tomar

IMPORTANTE - CITA√á√ÉO DE ARTIGOS:
- SEMPRE cite os n√∫meros dos artigos espec√≠ficos (Ex: "Art. 186 do C√≥digo Civil", "Art. 18 do CDC")
- Explique brevemente o que cada artigo diz
- Use m√∫ltiplos artigos quando relevante para fundamentar a resposta
- Cite artigos de diferentes c√≥digos se aplic√°vel ao caso

ESTILO:
- Linguagem clara e acess√≠vel (sem juridiqu√™s)
- Tom acolhedor e emp√°tico
- Respostas estruturadas e organizadas
- Use exemplos pr√°ticos
- Sempre reforce: "Procure um advogado para orienta√ß√£o completa"

${cfContext ? `\n\nCONTEXTO DA CONSTITUI√á√ÉO FEDERAL:${cfContext}` : ''}
${fileAnalysisPrefix}

**CR√çTICO - Sugest√µes de Perguntas:**
Ao final de CADA resposta, voc√™ DEVE incluir 2-3 sugest√µes de perguntas/t√≥picos que a pessoa pode explorar, no formato:

[SUGEST√ïES]
Pergunta relevante 1 baseada no contexto?
Pergunta relevante 2 que aprofunda o assunto?
Pergunta relevante 3 relacionada ao tema?
[/SUGEST√ïES]


As sugest√µes devem:
- Ser relevantes ao que a pessoa perguntou
- Aprofundar a conversa
- Oferecer novas perspectivas
- Ser escritas de forma clara e convidativa
${cfContext ? `\n\nCONTEXTO DA CONSTITUI√á√ÉO FEDERAL:${cfContext}` : ''}`;
    }

    // Construir mensagens no formato Gemini com suporte multimodal
    let geminiContents: any[] = [];
    
    // Adicionar system prompt como primeira mensagem do usu√°rio
    geminiContents.push({
      role: 'user',
      parts: [{ text: systemPrompt }]
    });
    
    // Processar mensagens incluindo arquivos
    for (let i = 0; i < messages.length; i++) {
      const m: any = messages[i];
      const isLastUserMessage = i === messages.length - 1 && m.role === 'user';
      
      if (m.role === 'user') {
        const parts: any[] = [{ text: m.content }];
        
        // Se for a √∫ltima mensagem do usu√°rio e houver arquivos, adicionar
        if (isLastUserMessage && files && files.length > 0) {
          for (const file of files) {
            const base64Data = file.data.includes('base64,') 
              ? file.data.split('base64,')[1] 
              : file.data;
            
            if (file.type.startsWith('image/')) {
              parts.push({
                inline_data: {
                  mime_type: file.type,
                  data: base64Data
                }
              });
            } else if (file.type === 'application/pdf') {
              // Enviar o PDF inteiro como inline_data para an√°lise real do conte√∫do
              parts.push({
                inline_data: {
                  mime_type: 'application/pdf',
                  data: base64Data
                }
              });
            }
          }
        }
        
        geminiContents.push({ role: 'user', parts });
      } else if (m.role === 'assistant') {
        geminiContents.push({
          role: 'model',
          parts: [{ text: m.content }]
        });
      }
    }

    const payload = {
      contents: geminiContents,
      generationConfig: {
        temperature: 0.7,
        maxOutputTokens: mode === 'lesson' ? 4000 : 2000,
      },
    };

    const response = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:streamGenerateContent?key=${DIREITO_PREMIUM_API_KEY}&alt=sse`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
      }
    );

    if (!response.ok) {
      const errorText = await response.text();
      console.error('Erro da API Gemini:', response.status, errorText);
      
      if (response.status === 429) {
        return new Response(
          JSON.stringify({ 
            error: 'quota_exceeded',
            message: '‚è±Ô∏è Limite de perguntas atingido. Por favor, aguarde alguns minutos e tente novamente.'
          }),
          {
            status: 429,
            headers: { ...corsHeaders, 'Content-Type': 'application/json' },
          }
        );
      }
      
      throw new Error(`Erro da API Gemini: ${response.status}`);
    }

    // Transformar o stream do Gemini para formato compat√≠vel
    const stream = new TransformStream({
      async transform(chunk, controller) {
        const text = new TextDecoder().decode(chunk);
        const lines = text.split('\n');
        
        for (const line of lines) {
          if (line.startsWith('data: ')) {
            try {
              const jsonData = line.slice(6);
              const parsed = JSON.parse(jsonData);
              
              // Extrair o texto do formato Gemini
              const content = parsed.candidates?.[0]?.content?.parts?.[0]?.text;
              if (content) {
                // Converter para formato SSE esperado pelo frontend
                const sseData = `data: ${JSON.stringify({
                  choices: [{
                    delta: { content }
                  }]
                })}\n\n`;
                controller.enqueue(new TextEncoder().encode(sseData));
              }
              
              // Verificar se finalizou
              if (parsed.candidates?.[0]?.finishReason) {
                controller.enqueue(new TextEncoder().encode('data: [DONE]\n\n'));
              }
            } catch (e) {
              console.error('Erro ao processar chunk:', e);
            }
          }
        }
      }
    });

    // Retornar o stream processado
    return new Response(response.body?.pipeThrough(stream), {
      headers: {
        ...corsHeaders,
        'Content-Type': 'text/event-stream',
        'Cache-Control': 'no-cache',
        'Connection': 'keep-alive',
      },
    });
  } catch (error) {
    console.error('Erro no chat-professora:', error);
    return new Response(
      JSON.stringify({ 
        error: error instanceof Error ? error.message : 'Erro desconhecido',
        message: 'Desculpe, ocorreu um erro. Por favor, tente novamente.'
      }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  }
});
