import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import "https://deno.land/x/xhr@0.1.0/mod.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { artigo, tipo, nivel, faixaEtaria, codigo, numeroArtigo } = await req.json();
    const DIREITO_PREMIUM_API_KEY = Deno.env.get('DIREITO_PREMIUM_API_KEY');
    const SUPABASE_URL = Deno.env.get('SUPABASE_URL');
    const SUPABASE_SERVICE_ROLE_KEY = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY');

    if (!DIREITO_PREMIUM_API_KEY) {
      throw new Error('DIREITO_PREMIUM_API_KEY n√£o configurada');
    }
    
    console.log('üöÄ Iniciando gera√ß√£o - Tipo:', tipo, '- N√≠vel:', nivel, '- Faixa Et√°ria:', faixaEtaria || 'N/A');
    console.log('‚úÖ API Key configurada:', DIREITO_PREMIUM_API_KEY.substring(0, 8) + '...');

    // Importar createClient do Supabase
    const { createClient } = await import('https://esm.sh/@supabase/supabase-js@2.75.1');
    const supabase = createClient(SUPABASE_URL!, SUPABASE_SERVICE_ROLE_KEY!);

    // Mapeamento COMPLETO universal de c√≥digos para tabelas - Cache Universal Sprint 3
    const tableMap: { [key: string]: string } = {
      'cpp': 'CP - C√≥digo Penal',
      'cc': 'CC - C√≥digo Civil',
      'cf': 'CF - Constitui√ß√£o Federal',
      'cpc': 'CPC ‚Äì C√≥digo de Processo Civil',
      'cpp-processo': 'CPP ‚Äì C√≥digo de Processo Penal',
      'cppenal': 'CPP ‚Äì C√≥digo de Processo Penal',
      'cdc': 'CDC ‚Äì C√≥digo de Defesa do Consumidor',
      'clt': 'CLT ‚Äì Consolida√ß√£o das Leis do Trabalho',
      'ctn': 'CTN ‚Äì C√≥digo Tribut√°rio Nacional',
      'ctb': 'CTB C√≥digo de Tr√¢nsito Brasileiro',
      'ce': 'CE ‚Äì C√≥digo Eleitoral',
      'ca': 'CA - C√≥digo de √Åguas',
      'cba': 'CBA C√≥digo Brasileiro de Aeron√°utica',
      'ccom': 'CCOM ‚Äì C√≥digo Comercial',
      'cdm': 'CDM ‚Äì C√≥digo de Minas',
      'eca': 'ESTATUTO - ECA',
      'idoso': 'ESTATUTO - IDOSO',
      'oab': 'ESTATUTO - OAB',
      'pcd': 'ESTATUTO - PESSOA COM DEFICI√äNCIA',
      'igualdade-racial': 'ESTATUTO - IGUALDADE RACIAL',
      'racial': 'ESTATUTO - IGUALDADE RACIAL',
      'cidade': 'ESTATUTO - CIDADE',
      'torcedor': 'ESTATUTO - TORCEDOR'
    };

    // Determinar o nome da coluna baseado no tipo e faixa et√°ria
    let coluna = '';
    if (tipo === "explicacao") {
      if (nivel === "resumido") {
        coluna = "explicacao_resumido";
      } else if (nivel === "simples") {
        coluna = faixaEtaria === "menor16" ? "explicacao_simples_menor16" : "explicacao_simples_maior16";
      } else {
        coluna = "explicacao_tecnico";
      }
    } else {
      coluna = "exemplo";
    }

    // Verificar se j√° existe conte√∫do em cache (funciona para TODOS os c√≥digos)
    const tableName = tableMap[codigo || ''];
    console.log(`üîç Verificando cache para: codigo="${codigo}", tabela="${tableName}", numeroArtigo="${numeroArtigo}", coluna="${coluna}"`);
    
    if (tableName && numeroArtigo) {
      try {
        const { data: cached, error: cacheError } = await supabase
          .from(tableName)
          .select(coluna)
          .eq('N√∫mero do Artigo', numeroArtigo)
          .maybeSingle();

        if (cacheError) {
          console.error('‚ùå Erro ao buscar cache:', cacheError);
        } else {
          console.log(`üì¶ Resultado da busca no cache:`, cached ? 'Registro encontrado' : 'Registro n√£o encontrado');
        }

        const colunaValue = cached ? cached[coluna as keyof typeof cached] : null;
        console.log(`üìä Valor da coluna "${coluna}":`, colunaValue ? `Encontrado (${typeof colunaValue === 'string' ? colunaValue.length + ' caracteres' : typeof colunaValue})` : 'NULL ou vazio');
        
        if (cached && colunaValue && typeof colunaValue === 'string' && colunaValue.trim().length > 100) {
          console.log(`‚úÖ CACHE HIT - Retornando do cache [${tableName}] - 0 tokens gastos`);
          
          // Simular streaming do conte√∫do cacheado
          const cachedContent = colunaValue;
          return new Response(
            new ReadableStream({
              start(controller) {
                controller.enqueue(new TextEncoder().encode(`data: ${JSON.stringify({choices: [{delta: {content: cachedContent}}]})}\n\n`));
                controller.enqueue(new TextEncoder().encode('data: [DONE]\n\n'));
                controller.close();
              }
            }),
            {
              headers: { 
                ...corsHeaders, 
                'Content-Type': 'text/event-stream',
                'Cache-Control': 'no-cache',
                'Connection': 'keep-alive',
              },
            }
          );
        } else {
          console.log(`‚ùå CACHE MISS - Gerando novo conte√∫do. Raz√µes:`, {
            registroExiste: !!cached,
            colunaTemValor: !!colunaValue,
            tipoCorreto: typeof colunaValue === 'string',
            tamanhoSuficiente: typeof colunaValue === 'string' ? colunaValue.trim().length > 100 : false
          });
        }
      } catch (e) {
        console.error('‚ùå Erro ao buscar cache:', e);
        // Continuar com gera√ß√£o se falhar a busca no cache
      }
    } else {
      console.log(`‚ö†Ô∏è N√£o √© poss√≠vel usar cache - tableName="${tableName}", numeroArtigo="${numeroArtigo}"`);
    }

    const artigoTitulo = artigo.split('\n')[0];

    const prompts: Record<string, string> = {
      explicacao_tecnico: `Voc√™ √© um professor de Direito especializado em an√°lise t√©cnica minuciosa e desmembrada.

ARTIGO A SER EXPLICADO:
${artigo}

INSTRU√á√ïES CR√çTICAS - SIGA RIGOROSAMENTE:
1. Explique DESMEMBRANDO cada inciso, par√°grafo e al√≠nea SEPARADAMENTE
2. Use markdown estruturado CORRETAMENTE: # para t√≠tulo √∫nico, ## para se√ß√µes, ### para subse√ß√µes, #### para itens
3. Seja EXTREMAMENTE DETALHADO - M√çNIMO 5-7 linhas por par√°grafo explicativo
4. Inclua exemplos pr√°ticos CONCRETOS e aplic√°veis
5. Cite jurisprud√™ncia relevante quando aplic√°vel (STF, STJ)
6. SEMPRE use > para cita√ß√µes diretas da lei ou ementas
7. Use **negrito** APENAS em termos jur√≠dicos essenciais (m√°ximo 3-4 por par√°grafo)
8. Linha vazia SEMPRE entre se√ß√µes e par√°grafos
9. Use --- para separar se√ß√µes elegantemente
10. NUNCA escreva par√°grafos com menos de 4 linhas

ESTRUTURA OBRIGAT√ìRIA - N√ÉO DESVIE:

# üìñ ${artigoTitulo}

---

## üîç Vis√£o Geral do Artigo

[Par√°grafo 1: 5-7 linhas sobre o contexto hist√≥rico e import√¢ncia deste artigo no ordenamento jur√≠dico brasileiro]

[Par√°grafo 2: 5-7 linhas sobre o bem jur√≠dico protegido e os objetivos da norma]

[Par√°grafo 3: 5-7 linhas sobre aplicabilidade pr√°tica e relev√¢ncia atual]

---

## üìã Texto Integral da Lei

> ${artigo}

---

## ‚öñÔ∏è An√°lise T√©cnica Desmembrada

### **Caput (Texto Principal)**

> "[Citar EXATAMENTE o caput do artigo]"

**Elementos Constituintes:**

[Par√°grafo 1: 5-7 linhas explicando detalhadamente a estrutura do tipo legal, conduta tipificada e elementos objetivos]

[Par√°grafo 2: 5-7 linhas sobre os sujeitos ativo e passivo, bem como capacidade de ser sujeito]

[Par√°grafo 3: 5-7 linhas sobre o bem jur√≠dico tutelado e sua relev√¢ncia constitucional]

**Requisitos de Aplica√ß√£o:**

‚Ä¢ **Requisito 1 - [Nome]**: [4-5 linhas explicando em detalhes]

‚Ä¢ **Requisito 2 - [Nome]**: [4-5 linhas explicando em detalhes]

‚Ä¢ **Requisito 3 - [Nome]**: [4-5 linhas explicando em detalhes]

---

### **¬ß 1¬∫ - [T√≠tulo Descritivo do Par√°grafo]**

> "[Citar EXATAMENTE o ¬ß 1¬∫ conforme a lei]"

**An√°lise Detalhada:**

[Par√°grafo 1: 5-7 linhas explicando o que este par√°grafo adiciona ou modifica em rela√ß√£o ao caput]

[Par√°grafo 2: 5-7 linhas sobre quando e como se aplica este par√°grafo especificamente]

[Par√°grafo 3: 5-7 linhas sobre diferen√ßas pr√°ticas e consequ√™ncias jur√≠dicas]

> **‚ö†Ô∏è ATEN√á√ÉO**: [2-3 linhas com ponto cr√≠tico de aplica√ß√£o deste par√°grafo]

---

[REPETIR estrutura acima para ABSOLUTAMENTE TODOS par√°grafos, incisos e al√≠neas presentes no artigo]

---

## üíº Casos Pr√°ticos e Aplica√ß√£o

### Caso Pr√°tico 1: [T√≠tulo Espec√≠fico da Situa√ß√£o]

**Contexto F√°tico:**
[5-6 linhas descrevendo situa√ß√£o concreta e detalhada]

**Aplica√ß√£o do Artigo:**
[5-6 linhas explicando como o artigo se aplica especificamente a este caso]

**Consequ√™ncias Jur√≠dicas:**
[4-5 linhas sobre os efeitos legais e pr√°ticos]

---

## üìö Jurisprud√™ncia Relevante

### üèõÔ∏è STF - [Tema da Decis√£o]

> **Ementa Resumida**: "[Citar parte relevante da ementa]"

**An√°lise:**
[5-6 linhas explicando o impacto desta decis√£o na interpreta√ß√£o do artigo]

---

## üö® Pontos Cr√≠ticos de Aten√ß√£o

> **üö® CR√çTICO 1**: [T√≠tulo do Ponto - 2-3 linhas]

[Par√°grafo: 5-6 linhas explicando detalhadamente por que este ponto √© cr√≠tico e como lidar com ele na pr√°tica]

---

## ‚ùå 5 Erros Mais Comuns na Aplica√ß√£o

**1. [Nome do Erro Espec√≠fico]**

- **O que √©**: [2-3 linhas definindo o erro]
- **Por que acontece**: [3-4 linhas explicando a causa]
- **Como evitar**: [3-4 linhas com orienta√ß√£o pr√°tica]

---

## üìå S√≠ntese Final e Consolida√ß√£o

[Par√°grafo 1: 5-7 linhas fazendo s√≠ntese completa do artigo e sua import√¢ncia]

[Par√°grafo 2: 5-7 linhas destacando os aspectos mais relevantes para aplica√ß√£o pr√°tica]

[Par√°grafo 3: 5-7 linhas com orienta√ß√£o final e conclus√£o]

> **üí° FRASE-CHAVE PARA MEMORIZA√á√ÉO**: [Resumo ultra-conciso em 1-2 linhas que capture a ess√™ncia do artigo]

---

REGRAS FINAIS OBRIGAT√ìRIAS:
- Markdown SEMPRE correto e hier√°rquico
- Linha vazia entre TODOS par√°grafos e se√ß√µes
- Par√°grafos NUNCA menores que 4 linhas
- Use > SEMPRE para cita√ß√µes legais
- Use --- para separar se√ß√µes principais
- DESDOBRAR absolutamente TODOS par√°grafos, incisos e al√≠neas do artigo`,
      
      explicacao_resumido: `Voc√™ √© um professor de Direito que explica de forma clara, objetiva e completa, mas concisa.

ARTIGO A SER EXPLICADO:
${artigo}

INSTRU√á√ïES CR√çTICAS:
1. Explique de forma SINT√âTICA mas mantendo COMPLETUDE dos pontos essenciais
2. Use markdown estruturado CORRETAMENTE
3. Par√°grafos de 4-5 linhas SEMPRE
4. Inclua exemplo pr√°tico CONCRETO
5. Destaque apenas os pontos MAIS relevantes
6. M√°ximo 700 palavras (seja conciso mas completo)
7. Linha vazia entre se√ß√µes
8. Use > para cita√ß√µes da lei

ESTRUTURA OBRIGAT√ìRIA:

# üìñ ${artigoTitulo}

---

## üéØ Ess√™ncia do Artigo

[Par√°grafo 1: 4-5 linhas explicando o n√∫cleo central do artigo e sua fun√ß√£o no ordenamento jur√≠dico]

[Par√°grafo 2: 4-5 linhas sobre a aplica√ß√£o pr√°tica e relev√¢ncia]

---

## üìã Texto da Lei

> ${artigo}

---

## üîë Pontos-Chave

**1. [Primeiro Ponto Essencial]**: [4-5 linhas explicando detalhadamente]

**2. [Segundo Ponto]**: [4-5 linhas de explica√ß√£o t√©cnica clara]

**3. [Terceiro Ponto]**: [4-5 linhas sobre aspecto importante]

**4. [Quarto Ponto]**: [4-5 linhas com informa√ß√£o relevante]

---

## üíº Aplica√ß√£o Pr√°tica

[Par√°grafo 1: 4-5 linhas com exemplo concreto do mundo real]

[Par√°grafo 2: 4-5 linhas explicando as consequ√™ncias pr√°ticas da aplica√ß√£o]

---

## ‚ö†Ô∏è Aten√ß√£o - Ponto Cr√≠tico

> **IMPORTANTE**: [2-3 linhas com alerta sobre aspecto cr√≠tico da aplica√ß√£o]

[Par√°grafo: 3-4 linhas desenvolvendo o alerta e orientando sobre cuidados necess√°rios]

---

## ‚úÖ Resumo Final

[Par√°grafo 1: 3-4 linhas consolidando os pontos principais]

[Par√°grafo 2: 3-4 linhas com conclus√£o pr√°tica]

> **üí° LEMBRE-SE**: [S√≠ntese ultra-concisa em 1-2 linhas]

IMPORTANTE: Mantenha dentro do limite de 700 palavras, mas N√ÉO sacrifique a qualidade - seja conciso mas preciso.`,

      explicacao_simples_menor16: `Voc√™ √© um educador especializado em explicar Direito de forma EXTREMAMENTE SIMPLES e acess√≠vel para adolescentes de 12-16 anos.

ARTIGO A SER EXPLICADO:
${artigo}

INSTRU√á√ïES OBRIGAT√ìRIAS - CR√çTICAS:
1. LINGUAGEM SUPER SIMPLES - explique como se estivesse conversando com seu irm√£o/irm√£ mais novo(a)
2. ZERO juridiqu√™s - se aparecer algum termo t√©cnico, explique IMEDIATAMENTE de forma ultra-simples
3. Use MUITAS analogias com coisas que adolescentes conhecem (escola, TikTok, Instagram, WhatsApp, jogos, YouTube)
4. Tom SUPER CASUAL tipo "sabe quando...", "tipo assim", "olha s√≥", "√© tipo quando", "imagina que"
5. Par√°grafos de 4-5 linhas mantendo linguagem super acess√≠vel
6. Exemplos SEMPRE com situa√ß√µes reais que adolescentes vivenciam
7. Use emojis estrategicamente para deixar mais leve
8. NUNCA use termos como "dispositivo legal", "ordenamento jur√≠dico", "preceitua" - use palavras do dia a dia

ESTRUTURA OBRIGAT√ìRIA:

# üéì ${artigoTitulo.replace(/Art\. \d+/g, 'Lei').replace(/¬∫/, '')} 

---

## ü§î O Que Isso Significa?

[Par√°grafo 1: 4-5 linhas explicando em linguagem de adolescente, super simples, o que √© este artigo]

[Par√°grafo 2: 4-5 linhas continuando a explica√ß√£o de forma ainda mais clara, usando compara√ß√µes]

[Par√°grafo 3: 4-5 linhas mostrando por que isso √© importante pro dia a dia]

**Pensa assim**: [3-4 linhas com analogia super clara usando TikTok, Instagram, games ou coisas que todo adolescente conhece]

---

## üìù O Que a Lei Diz (Texto Original)

> ${artigo}

**Traduzindo para Linguagem Normal:**

[Par√°grafo 1: 4-5 linhas explicando o que o artigo diz, mas com ZERO palavras dif√≠ceis]

[Par√°grafo 2: 4-5 linhas continuando a tradu√ß√£o, como se estivesse explicando pra um amigo no recreio]

[Par√°grafo 3: 3-4 linhas finalizando a explica√ß√£o simples]

---

## üí° Explica√ß√£o Super F√°cil

### O B√°sico que Voc√™ Precisa Saber

[Par√°grafo 1: 4-5 linhas explicando o b√°sico com linguagem ultra-simples]

[Par√°grafo 2: 4-5 linhas com mais detalhes mas ainda super f√°cil de entender]

[Par√°grafo 3: 4-5 linhas dando exemplos gerais do dia a dia]

### Como Isso Te Afeta

[Par√°grafo 1: 4-5 linhas mostrando como isso impacta a vida de um adolescente]

[Par√°grafo 2: 4-5 linhas com situa√ß√µes espec√≠ficas que podem acontecer]

---

## üéÆ Exemplos do Seu Dia a Dia

### **Situa√ß√£o 1 - Na Escola** üìö

[4-5 linhas com exemplo concreto de algo que pode acontecer na escola e como este artigo se aplica]

### **Situa√ß√£o 2 - Em Casa com a Fam√≠lia** üè†

[4-5 linhas com exemplo de situa√ß√£o familiar que todo adolescente entende]

### **Situa√ß√£o 3 - Online (Redes Sociais/Games)** üì±

[4-5 linhas com exemplo envolvendo internet, redes sociais ou jogos online]

### **Situa√ß√£o 4 - Com Amigos** üë•

[4-5 linhas com exemplo de situa√ß√£o entre amigos]

---

## üéØ Resumindo Tudo

[Par√°grafo 1: 3-4 linhas fazendo resumo super simples de tudo]

[Par√°grafo 2: 3-4 linhas com mensagem final f√°cil de lembrar]

**Em uma frase que d√° pra guardar**: [S√≠ntese ultra-simples em 1 linha que capture a ess√™ncia]

---

REGRAS CR√çTICAS FINAIS:
- NUNCA use palavras dif√≠ceis ou jur√≠dicas sem explicar
- Use SEMPRE analogias com coisas que adolescentes conhecem
- Tom de conversa casual, nunca formal
- Emojis para tornar mais leve
- Exemplos SEMPRE com situa√ß√µes que adolescentes vivem
- Se tiver que escolher entre precis√£o t√©cnica e clareza, escolha CLAREZA`,

      explicacao_simples_maior16: `Voc√™ √© um educador jur√≠dico especializado em explicar Direito de forma clara e acess√≠vel para adultos sem forma√ß√£o jur√≠dica.

ARTIGO A SER EXPLICADO:
${artigo}

INSTRU√á√ïES OBRIGAT√ìRIAS:
1. Linguagem CLARA, DIRETA e PROFISSIONAL - mas SEM juridiqu√™s desnecess√°rio
2. Use exemplos do cotidiano adulto (trabalho, contratos, compra/venda, fam√≠lia, tr√¢nsito)
3. Explique termos t√©cnicos SEMPRE que aparecerem, de forma simples
4. Tom profissional mas acess√≠vel e respeitoso
5. Par√°grafos de 4-5 linhas mantendo clareza
6. Foco em aplica√ß√£o pr√°tica no dia a dia
7. Use > para cita√ß√µes da lei

ESTRUTURA OBRIGAT√ìRIA:

# üéì ${artigoTitulo}

---

## ü§î Entendendo o Artigo

[Par√°grafo 1: 4-5 linhas explicando de forma clara e objetiva o que este artigo regula]

[Par√°grafo 2: 4-5 linhas sobre a import√¢ncia pr√°tica deste artigo no cotidiano]

[Par√°grafo 3: 4-5 linhas contextualizando quando e como se aplica]

**Para facilitar a compreens√£o**: [3-4 linhas com analogia do cotidiano adulto que todos entendem]

---

## üìù Texto da Lei

> ${artigo}

**Em palavras mais simples:**

[Par√°grafo 1: 4-5 linhas traduzindo o artigo para linguagem clara, sem juridiqu√™s]

[Par√°grafo 2: 4-5 linhas continuando a explica√ß√£o acess√≠vel]

[Par√°grafo 3: 3-4 linhas finalizando a tradu√ß√£o em linguagem simples]

---

## üí° Explica√ß√£o Clara e Acess√≠vel

### O Que Voc√™ Precisa Saber

[Par√°grafo 1: 4-5 linhas explicando os pontos principais de forma clara]

[Par√°grafo 2: 4-5 linhas detalhando aspectos importantes]

[Par√°grafo 3: 4-5 linhas sobre consequ√™ncias pr√°ticas]

### Como Isso Funciona na Pr√°tica

[Par√°grafo 1: 4-5 linhas explicando a aplica√ß√£o concreta]

[Par√°grafo 2: 4-5 linhas com orienta√ß√µes pr√°ticas]

---

## üíº Situa√ß√µes Pr√°ticas do Cotidiano

### **No Ambiente de Trabalho** üëî

[4-5 linhas com exemplo concreto de situa√ß√£o profissional/trabalhista]

### **Em Contratos e Neg√≥cios** üìÑ

[4-5 linhas com exemplo envolvendo contratos, compras, vendas ou servi√ßos]

### **Em Rela√ß√µes Familiares** üë®‚Äçüë©‚Äçüëß‚Äçüë¶

[4-5 linhas com exemplo de situa√ß√£o familiar ou pessoal]

### **No Dia a Dia** üèôÔ∏è

[4-5 linhas com exemplo de situa√ß√£o cotidiana comum]

---

## ‚ö†Ô∏è Pontos de Aten√ß√£o

> **IMPORTANTE SABER**: [2-3 linhas com alerta pr√°tico relevante]

[Par√°grafo: 3-4 linhas explicando cuidados necess√°rios e orienta√ß√µes]

---

## üéØ Resumo e Orienta√ß√£o Final

[Par√°grafo 1: 4-5 linhas consolidando o entendimento do artigo]

[Par√°grafo 2: 4-5 linhas com orienta√ß√£o pr√°tica e conclus√£o]

**Conclus√£o em poucas palavras**: [S√≠ntese clara e objetiva em 1-2 linhas]

---

REGRAS FINAIS:
- Clareza acima de tudo, mas mantenha profissionalismo
- Exemplos SEMPRE do mundo adulto real
- Explique termos t√©cnicos quando us√°-los
- Foco em como isso afeta a vida pr√°tica
- Tom respeitoso e educativo`,

      exemplo: `Voc√™ √© um professor de Direito experiente. Crie exemplos pr√°ticos EXTREMAMENTE DETALHADOS aplicando o artigo:

${artigo}

FORMATO OBRIGAT√ìRIO:

# üíº Casos Pr√°ticos Completos: ${artigoTitulo}

---

## üìã Caso Pr√°tico 1: [T√≠tulo Descritivo e Espec√≠fico]

### üìç Contexto e Fatos

[Par√°grafo 1: 5-7 linhas descrevendo a situa√ß√£o inicial detalhadamente]

[Par√°grafo 2: 5-7 linhas sobre as partes envolvidas e seus interesses]

[Par√°grafo 3: 5-7 linhas detalhando o contexto f√°tico completo]

### üìã O Problema Jur√≠dico

[Par√°grafo: 4-5 linhas identificando claramente a quest√£o a ser resolvida]

### ‚öñÔ∏è Aplica√ß√£o do Artigo

[Par√°grafo 1: 5-7 linhas explicando como o artigo incide no caso]

> ${artigo}

[Par√°grafo 2: 5-7 linhas sobre a subsun√ß√£o do fato √† norma]

[Par√°grafo 3: 5-7 linhas analisando cada requisito legal]

### üéØ Consequ√™ncias Jur√≠dicas

[Par√°grafo 1: 5-7 linhas sobre os efeitos pr√°ticos]

[Par√°grafo 2: 5-7 linhas sobre direitos e obriga√ß√µes gerados]

### ‚úÖ Solu√ß√£o e Desfecho

[Par√°grafo 1: 5-7 linhas explicando como foi resolvido]

[Par√°grafo 2: 4-5 linhas sobre o resultado final]

---

[REPETIR estrutura acima para mais 3 casos pr√°ticos COMPLETAMENTE DIFERENTES]

---

## üéØ An√°lise Comparativa dos Casos

[Par√°grafo 1: 5-7 linhas comparando semelhan√ßas]

[Par√°grafo 2: 5-7 linhas destacando diferen√ßas]

[Par√°grafo 3: 5-7 linhas sobre padr√µes identificados]

---

## üìå S√≠ntese Final

[Par√°grafo: 5-7 linhas consolidando todos os aprendizados]

REGRAS CR√çTICAS:
- Sempre separe par√°grafos com linha vazia
- Crie 4 casos pr√°ticos MUITO diferentes entre si
- Par√°grafos de 5-7 linhas (n√£o 3-4!)
- Use # para t√≠tulo, ## para casos, ### para subsections
- Use blockquote para citar o artigo
- Seja EXTREMAMENTE detalhado em cada caso
- M√≠nimo de 2000 palavras no total`
    };

    let promptKey: string;
    if (tipo === "explicacao") {
      if (nivel === "resumido") {
        promptKey = "explicacao_resumido";
      } else if (nivel === "simples") {
        promptKey = faixaEtaria === "menor16" ? "explicacao_simples_menor16" : "explicacao_simples_maior16";
      } else {
        promptKey = "explicacao_tecnico";
      }
    } else {
      promptKey = "exemplo";
    }
    
    const prompt = prompts[promptKey] || prompts.explicacao_tecnico;

    const response = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:streamGenerateContent?key=${DIREITO_PREMIUM_API_KEY}`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: prompt
            }]
          }],
          generationConfig: {
            temperature: 0.2, // Mais determin√≠stico para melhor qualidade - Sprint 2
            maxOutputTokens: nivel === 'tecnico' ? 8000 : nivel === 'resumido' ? 2000 : 3000,
            topP: 0.8,
            topK: 40
          }
        }),
      }
    );
    
    console.log('üì° Resposta da API Gemini - Status:', response.status);

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Erro da API:', response.status, errorText);
      throw new Error(`Erro da API Gemini: ${response.status}`);
    }

    // Transform Gemini stream to SSE format
    console.log('üîÑ Iniciando processamento do stream...');
    let buffer = '';
    let totalContentSent = 0;
    let fullContent = '';
    const transformStream = new TransformStream({
      async transform(chunk, controller) {
        const text = new TextDecoder().decode(chunk);
        buffer += text;
        
        // Try to extract complete JSON objects from buffer
        let startIdx = 0;
        while (startIdx < buffer.length) {
          // Find start of JSON object
          const objStart = buffer.indexOf('{', startIdx);
          if (objStart === -1) break;
          
          // Try to find matching closing brace
          let braceCount = 0;
          let objEnd = -1;
          for (let i = objStart; i < buffer.length; i++) {
            if (buffer[i] === '{') braceCount++;
            if (buffer[i] === '}') {
              braceCount--;
              if (braceCount === 0) {
                objEnd = i + 1;
                break;
              }
            }
          }
          
          // If we found a complete JSON object
          if (objEnd !== -1) {
            const jsonStr = buffer.substring(objStart, objEnd);
            try {
              const data = JSON.parse(jsonStr);
              const content = data.candidates?.[0]?.content?.parts?.[0]?.text;
              
              if (content && content.trim().length > 0) {
                fullContent += content;
                totalContentSent++;
                if (totalContentSent === 1) {
                  console.log('‚úÖ Primeiro conte√∫do enviado:', content.substring(0, 100));
                }
                if (totalContentSent % 10 === 0) {
                  console.log(`üì§ ${totalContentSent} chunks enviados`);
                }
                const sseData = JSON.stringify({
                  choices: [{ delta: { content } }]
                });
                controller.enqueue(new TextEncoder().encode(`data: ${sseData}\n\n`));
              }
            } catch (e) {
              console.error('‚ùå Erro ao parsear JSON:', e);
            }
            
            // Remove processed part from buffer
            buffer = buffer.substring(objEnd);
            startIdx = 0;
          } else {
            // No complete object found, wait for more data
            break;
          }
        }
        
        // Keep buffer manageable
        if (buffer.length > 50000) {
          console.error('‚ö†Ô∏è Buffer muito grande, limpando:', buffer.length);
          buffer = buffer.substring(buffer.length - 10000);
        }
      },
      
      async flush(controller) {
        // Send [DONE] marker
        controller.enqueue(new TextEncoder().encode('data: [DONE]\n\n'));
        console.log('‚úÖ Stream finalizado - Total de chunks:', totalContentSent);
        
        // Limitar conte√∫do a 8000 caracteres se exceder
        let contentToSave = fullContent;
        if (contentToSave.length > 8000) {
          console.log(`‚ö†Ô∏è Conte√∫do excedeu 8000 caracteres (${contentToSave.length}), truncando...`);
          // Cortar em 8000 e procurar √∫ltimo par√°grafo completo
          contentToSave = contentToSave.substring(0, 8000);
          const lastParagraph = contentToSave.lastIndexOf('\n\n');
          if (lastParagraph > 7500) {
            contentToSave = contentToSave.substring(0, lastParagraph);
          }
          console.log(`‚úÇÔ∏è Conte√∫do truncado para ${contentToSave.length} caracteres`);
        }
        
        // Salvar no banco ap√≥s streaming completo (funciona para TODOS os c√≥digos)
        if (tableName && numeroArtigo && contentToSave.trim().length > 100) {
          try {
            console.log(`üíæ Tentando salvar cache: tabela="${tableName}", numeroArtigo="${numeroArtigo}", coluna="${coluna}", tamanho=${contentToSave.length}`);
            
            const { data: updateResult, error: updateError } = await supabase
              .from(tableName)
              .update({ 
                [coluna]: contentToSave,
                ultima_atualizacao: new Date().toISOString()
              })
              .eq('N√∫mero do Artigo', numeroArtigo)
              .select();
            
            if (updateError) {
              console.error('‚ùå Erro ao salvar cache:', updateError);
            } else if (updateResult && updateResult.length > 0) {
              console.log(`‚úÖ Cache salvo com sucesso [${tableName}] - ${updateResult.length} registro(s) atualizado(s)`);
              console.log(`üìä Pr√≥ximos requests usar√£o cache (0 tokens)`);
            } else {
              console.log(`‚ö†Ô∏è Update executado mas nenhum registro foi atualizado. Verifique se o artigo existe na tabela.`);
            }
          } catch (e) {
            console.error('‚ùå Exce√ß√£o ao salvar no banco:', e);
          }
        } else {
          console.log(`‚ö†Ô∏è N√£o foi poss√≠vel salvar cache - tableName="${tableName}", numeroArtigo="${numeroArtigo}", tamanhoConteudo=${contentToSave.trim().length}`);
        }
      }
    });

    return new Response(response.body?.pipeThrough(transformStream), {
      headers: { 
        ...corsHeaders, 
        'Content-Type': 'text/event-stream',
        'Cache-Control': 'no-cache',
        'Connection': 'keep-alive',
      },
    });
  } catch (error) {
    console.error('Erro ao gerar conte√∫do:', error);
    return new Response(
      JSON.stringify({ 
        error: error instanceof Error ? error.message : 'Erro desconhecido',
        conteudo: 'Desculpe, ocorreu um erro ao gerar o conte√∫do. Por favor, tente novamente.'
      }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  }
});
